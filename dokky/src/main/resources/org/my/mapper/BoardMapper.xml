<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.my.mapper.BoardMapper">
<!-- 마지막 업데이트 2022-06-15 -->
	
	<sql id="criteria"> 
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'N'.toString()">
							nickName like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	<!-- ( title like '%'||'keyword'||'%' OR content like '%'||'keyword'||'%' OR writer like '%'||'keyword'||'%' ) AND -->
	
	<sql id="criteriaWithOrder">
		<trim prefix="and (" suffix=")" prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'N'.toString()">
							nickName like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	<!-- and ( title like '%'||'keyword'||'%' OR content like '%'||'keyword'||'%' OR writer like '%'||'keyword'||'%' ) -->

	<sql id="criteriaAllWithOrder">
		<trim prefix="where (" suffix=") " prefixOverrides="OR">
			<foreach item='type' collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'N'.toString()">
							nickName like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	<!-- where ( title like '%'||'keyword'||'%' OR content like '%'||'keyword'||'%' OR writer like '%'||'keyword'||'%' ) -->

	<select id="getList" resultType="org.my.domain.board.BoardVO"> 
			<![CDATA[
			   select category
			    	, replyCnt
			    	, likeCnt
			    	, board_num
			    	, title
			    	, content
			    	, nickName
			    	, regdate
			    	, hitCnt
			    	, MONEY
			    	, userId
			    from 
			      ( select /*+INDEX_DESC(DK_BOARD PK_DK_BOARD) */ rownum rn
							     								, category
														    	, replyCnt
														    	, likeCnt
														    	, board_num
														    	, title
														    	, content
														    	, nickName
														    	, regdate
														    	, hitCnt
														    	, MONEY
														    	, userId 
					from DK_BOARD 
					  where category = #{category} and
			]]>
				<include refid ="criteria"></include>  

		 	 <![CDATA[    
			      rownum <= #{pageNum} * #{amount}
			      )
			  		where rn > (#{pageNum} -1) * #{amount}   
		 	 ]]>
	</select>
	
	<select id="getListWithOrder" resultType="org.my.domain.board.BoardVO">
		 	select category
				 , replyCnt
				 , likeCnt
				 , board_num
				 , title
				 , content
				 , nickName
				 , regdate
				 , hitCnt
				 , MONEY
				 , userId
			from
				(  select  		  	
		  		        <choose>
							<when test='order == "1" '>
								ROW_NUMBER() OVER(order by hitcnt desc) AS rn
							</when>
							<when test='order == "2" '>
								ROW_NUMBER() OVER(order by REPLYCNT desc) AS rn
							</when>
							<when test='order == "3" '>
								ROW_NUMBER() OVER(order by likeCnt desc) AS rn
							</when>
							<when test='order == "4" '>
								ROW_NUMBER() OVER(order by MONEY desc) AS rn
							</when>
						</choose>
	                , category
					, replyCnt
					, likeCnt
					, board_num
					, title
					, content
					, nickName
					, regdate
					, hitCnt
					, MONEY
					, userId
				  from DK_BOARD 
				  	where category = #{category} 
					<include refid ="criteriaWithOrder"></include>  
				)
				<![CDATA[
				 where rn > (#{pageNum} -1) * #{amount} and rn <= #{pageNum} * #{amount}
				]]>	
	</select>
	
	<select id="getTotalCount" resultType="int">
		select count(*) from DK_BOARD where category = #{category} and <include refid="criteria"></include>  board_num > 0
	</select>
			
	<select id="getAllList" resultType="org.my.domain.board.BoardVO"> 
		 <![CDATA[
		   select category
		   		, replyCnt
		    	, likeCnt
		    	, board_num
		    	, title
		    	, content
		    	, nickName
		    	, regdate
		    	, hitCnt
		    	, userId
		    	, MONEY
		    from 
		         ( select /*+INDEX_DESC(DK_BOARD PK_DK_BOARD) */ rownum rn
							     								, category
														    	, replyCnt
														    	, likeCnt
														    	, board_num
														    	, title
														    	, content
														    	, nickName
														    	, regdate
														    	, hitCnt
														    	, userId
														    	, MONEY 
				   from DK_BOARD where
		  	]]>
				<include refid ="criteria"></include>  
		  	<![CDATA[    
		          rownum <= #{pageNum} * #{amount}
		        )
		          where rn > (#{pageNum} -1) * #{amount}   
		  	]]>
	</select>
	
	<select id="getAllListWithOrder" resultType="org.my.domain.board.BoardVO"> 
			 select category
					, replyCnt
					, likeCnt
					, board_num
					, title
					, content
					, nickName
					, regdate
					, hitCnt
					, MONEY
					, userId
			from ( select 
	  				   <choose>
							<when test='order == "1" '>
								ROW_NUMBER() OVER(order by hitcnt desc) AS rn
							</when>
							<when test='order == "2" '>
								ROW_NUMBER() OVER(order by REPLYCNT desc) AS rn
							</when>
							<when test='order == "3" '>
								ROW_NUMBER() OVER(order by likeCnt desc) AS rn
							</when>
							<when test='order == "4" '>
								ROW_NUMBER() OVER(order by MONEY desc) AS rn
							</when>
						</choose>
                	, category
					, replyCnt
					, likeCnt
					, board_num
					, title
					, content
					, nickName
					, regdate
					, hitCnt
					, MONEY
					, userId
				   from DK_BOARD 
					<include refid ="criteriaAllWithOrder"></include>   
				  ) <![CDATA[
				 where rn > (#{pageNum} -1) * #{amount} and rn <= #{pageNum} * #{amount}
			]]>	
	</select>
	
	<select id="getAllTotalCount" resultType="int">
		select count(*) from DK_BOARD where <include refid="criteria"></include>  board_num > 0
	</select>
	
	<insert id="register">
		
		<!-- 생성된 PK board_num 값을 넘겨줘야 하는 경우 -->
		<selectKey keyProperty="board_num" order="BEFORE" resultType="long">
				select seq_dk_board.nextval from dual
		</selectKey>

		insert into DK_BOARD ( board_num
							 , category
							 , title
							 , content
							 , nickName
							 , userId
							 )
		               values (  #{board_num}
				               , #{category}
				               , #{title}
				               , #{content}
				               , #{nickName}
				               , #{userId}
		               )
	</insert>
	
	<select id="getScrapCnt" resultType="int">
		<![CDATA[
			select count(*) from dk_scrap where userId = #{userId} and board_num = #{board_num}
		]]>
	</select>
	
	<update id="updateHitCnt">
		update dk_board set hitCnt = hitCnt+1 where board_num = #{board_num}
	</update>
	
	<select id="read" resultType="org.my.domain.board.BoardVO">
		select * from DK_BOARD where board_num = #{board_num}
	</select>
	
	<update id="updateBoard">
		update DK_BOARD 
			set title= #{title},
			category= #{category},
			content=#{content},
			updateDate = sysdate
		where board_num = #{board_num}
	</update>
	
	<delete id="deleteBoard">
		delete DK_BOARD where board_num = #{board_num} 
	</delete>
	
	<!-- 글 좋아요 버튼 누름 여부 체크-->	
	<select id="checkBoardLikeButton" resultType="int">
		select count(*) from dk_board_like where userId = #{userId} and board_num = #{board_num}
	</select>
	
	<!-- 글 싫어요 버튼 누름 여부 체크-->	
	<select id="checkBoardDisLikeButton" resultType="int">
		select count(*) from dk_board_dislike where userId = #{userId} and board_num = #{board_num}
	</select>
	
	<!-- 글 좋아요 버튼 누르기 -->
	<insert id="pushBoardLikeButton">
	
		insert into dk_board_like (	    userId
									  , board_num
								  )
							values (   #{userId}
									  ,#{board_num}
									)
	</insert>
	
	<!-- 글 싫어요 버튼 누르기 -->
	<insert id="pushBoardDisLikeButton">
	
		insert into dk_board_dislike (	    userId
									  , board_num
								  )
							values (   #{userId}
									  ,#{board_num}
									)
	</insert>
	
	<!-- 글 좋아요 카운트 +1 더하기 -->
	<update id="plusBoardLikeCount">
		update DK_BOARD set likeCnt = likeCnt + 1 where board_num = #{board_num}
	</update>
	
	<!-- 글 싫어요 카운트 -1 더하기 -->
	<update id="plusBoardDisLikeCount">
		update DK_BOARD set dislikeCnt = dislikeCnt - 1 where board_num = #{board_num}
	</update>
	
	<!-- 글 좋아요 버튼 당기기(취소) -->
	<delete id="pullBoardLikeButton">
		delete from dk_board_like where userId = #{userId} and board_num = #{board_num}
	</delete>
	
	<!-- 글 싫어요 버튼 당기기(취소) -->
	<delete id="pullBoardDisLikeButton">
		delete from dk_board_dislike where userId = #{userId} and board_num = #{board_num}
	</delete>

	<!-- 글 좋아요 카운트 빼기(-1) -->
	<update id="minusBoardLikeCount">
		update DK_BOARD set likeCnt = likeCnt - 1 where board_num = #{board_num}
	</update>
	
	<!-- 글 싫어요 카운트 빼기(+1) -->
	<update id="minusBoardDisLikeCount">
		update DK_BOARD set dislikeCnt = dislikeCnt + 1 where board_num = #{board_num}
	</update>
	
	<!-- 좋아요 카운트 가져오기 -->
	<select id="getLikeCount" resultType="String">
		select likeCnt from DK_BOARD where board_num = #{board_num}
	</select>
	
	<!-- 글 싫어요 카운트 가져오기 -->
	<select id="getDisLikeCount" resultType="String">
		select dislikeCnt from DK_BOARD where board_num = #{board_num}
	</select>
	
	<!-- 나의 캐시 가져오기 -->
	<select id="getMyCash" resultType="String">
		select cash from DK_member where userId = #{userId}
	</select>
	
	<!-- 기부하는자의 캐시 차감하기 -->
	<update id="minusMycash">
	    update dk_member set cash = cash - #{money} where userId = #{userId}
	</update> 
	
	<!-- 내 캐시 히스토리 입력 -->
	<insert id="createMyCashHistory">
			insert into dk_cash ( cash_num
								, cashKind
								, cashAmount
								, userId
								, nickName
								, specification
								, board_num
							) values 
									(
										  seq_dk_cash.nextval
										, '기부하기'
										, #{money}
										, #{userId}
										, #{nickName}
										, '게시판'
										, #{board_num}
									)
	</insert>
	
	<!-- 기부받는자 캐시 증감하기 -->
	<update id="plusBoardUserCash">
	    update dk_member set cash = cash + #{money} where userId = #{donatedId}
	</update> 
	
	<!-- 게시글 유저 캐시 히스토리 입력 -->
	<insert id="createBoardUserCashHistory">
			insert into dk_cash ( cash_num
								, cashKind
								, cashAmount
								, userId
								, nickName
								, specification
								, board_num
								)   
								 values 
										(
											seq_dk_cash.nextval
											, '기부받기'
											, #{money}
											, #{donatedId}
											, #{donatedNickName}
											, '게시판'
											, #{board_num}
										)
	</insert>
	
	<!-- 게시글의 기부금액 증감하기 -->
	<update id="plusBoardMoney"> 
	    update dk_board set MONEY = MONEY + #{money} where board_num = #{board_num}
	</update> 
	
	<!-- 게시글의 기부금액 조회하기 -->
	<select id="getBoardMoney" resultType="String">
		select money from dk_board where board_num = #{board_num}
	</select>
	
	<insert id="createReportdata">
			insert into dk_report ( 	report_num
									  , reportKind
									  , reportingId
									  , reportingNick
									  , reportedId
									  , reportedNick
									  , board_num
									  , reason
							      ) 
							      	values 
										(     seq_dk_report.nextval
											, #{reportKind}
											, #{reportingId}
											, #{reportingNick}
											, #{reportedId}
											, #{reportedNick}
											, #{board_num}
											, #{reason}
										)
	</insert>
	
	<insert id="postScrapData">
		insert into dk_scrap (scrap_num, userId, board_num) values (seq_dk_scrap.nextval, #{userId}, #{board_num})
	</insert>
	
	<delete id="deleteScrapData">
		delete dk_scrap where userId = #{userId} and board_num = #{board_num}
	</delete>
	
	<!-- 해당 글의 댓글 갯수 하나 늘리거나 빼기 --> 
  	<update id="updateReplyCnt">
  		update dk_board set replycnt = replycnt + #{amount} where board_num = #{board_num}
  	</update>
  	
  	<select id="getRecentBoard_num" resultType="long">
		<![CDATA[
			select BOARD_NUM from DK_BOARD WHERE ROWNUM <= 1 order by BOARD_NUM desc 
		]]>	
	</select>

</mapper>
