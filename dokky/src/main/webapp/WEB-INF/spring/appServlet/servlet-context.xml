<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
 	<!-- <mvc:resources mapping="/upload/**" location="/var/lib/tomcat9/webapps/upload/" /> -->
 	<!-- <mvc:resources mapping="/upload/**" location="/home/ubuntu/upload" /> -->
 
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 스프링 MVC의 JSP를 처리하는 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="1">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0" />
	
    <beans:bean id="DownloadView" class="org.my.utils.DownloadView"/>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
	<!-- 스프링에서 업로드 처리 : multipartResolver 라는 타입의 객체를 빈으로 등록해야 가능하다. -->
	</beans:bean>
	
	<context:component-scan base-package="org.my.controller" />
	<context:component-scan base-package="org.my.exception" />
	
	<security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled" />
		<!-- 어노테이션을 이용하는 스프링 시큐리티 설정 / 어노테이션은 기본으로 ’disabled’되어 있으므로 enabled'로 설정 -->
		<!-- 어노테이션을 활성화하기 위해서는 스프링 MVC의 설정을 담당하는 servlet-context.xml에 관련 설정이 추가된다는 점 -->
	
	<beans:bean id="ObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>
	
	<!-- websocket handlers -->
	<beans:bean id="commonWebsocketHandler" class="org.my.handler.CommonWebsocketHandler"/>
	<beans:bean id="chatWebsocketHandler" class="org.my.handler.ChatWebsocketHandler"/>
	
	<websocket:handlers>
	 <websocket:mapping handler="commonWebsocketHandler" path="/commonWebsocketHandler" />
	 <websocket:mapping handler="chatWebsocketHandler" path="/chatWebsocketHandler" />
		 <websocket:handshake-interceptors>
		      <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		      <!-- 로그인한 유저의 아이디를 알려면 http세션을 써야함, 그러려면 웹소켓 세션에다가 http세션을 올려줘야 접근이 가능함 -->
		 </websocket:handshake-interceptors>
		 <!-- <websocket:sockjs/> -->
	</websocket:handlers>
	
	
</beans:beans>
