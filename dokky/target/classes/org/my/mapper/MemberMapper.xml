<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.my.mapper.MemberMapper">

	<resultMap id="authMap" type="org.my.domain.common.AuthVO" >
	   	<result property="userId" column="userid"/>
	   	<result property="auth" column="auth"/>
 	</resultMap>
	<!--   resultMap은 SELECT의 결과를 처리하게 된다. 
	이게 1+N의 상황으로  
	하나의 회원 정보에 여러 개에 권한을 모아서 처리하는 방식인데.. 
	그러면 그룹을 만드는 기준이 필요한데.. 
	그 기준을 PK에 해당하는 userid 값으로 지정한 것이다. 
	MyBatis문서에는 성능을 향상시키는 효과도 있다고 나온다.
	resultMap 
	id – ID 결과. ID 와 같은 결과는 전반적으로 성능을 향상시킨다-->
  <resultMap id="memberMap" type="org.my.domain.common.MemberVO" >
    <id property="userId" column="userId"/><!-- PK에 해당하는 userid 값으로 지정 -->
	    <result property="userId" column="userid"/>
	    <result property="userPw" column="userpw"/>
	    <result property="nickName" column="nickname"/>
	    <result property="enabled" column="enabled" />
	    <result property="accountNonLocked" column="accountnonlocked" />
    <collection property="authList" resultMap="authMap"></collection> 
  </resultMap>
	<!--    회원 정보는 MemberVO 하나이고，AuthVO는 2개가 되어야 하는
	결과인데. memberMap이라는 이름을 가지는〈resultMap〉은〈result〉와
	〈collection〉을 이용해서 바깥쪽 객체(MemberVO의 인스턴스)와 안쪽 객체들(AuthVO
	의 인스턴스들)을 구성. MyBatis에서는 이처럼 하나의 결과에 부가적으로
	여러 개의 데이터를 처리하는 경우 1:N의 결과를 처리할수 있는〈resultMap〉태그를 지
	원. -->
  
	 <insert id="registerMembers">
	 
		 insert into dk_member(
		 					   member_num,
		 					   userid,
		 					   userpw,
		 					   nickName
		 					   ) values(
		 					   			seq_dk_member.nextval,
		 					   			#{userId},
 					   				    #{userPw},
 					   				    #{nickName}
					   				   )
	 </insert>
	 
	 <insert id="registerMember_auth">
		 insert into dk_member_auth(userid, auth) values(#{userId}, 'ROLE_USER')
	 </insert>
	 
	  <select id="readMembers" resultMap="memberMap">
		SELECT 
		  mem.userid, userpw, nickname, enabled, accountNonLocked, auth
		FROM 
		  dk_member mem LEFT OUTER JOIN dk_member_auth auth on mem.userid = auth.userid 
		WHERE mem.userid = #{userId} 
 	 </select>
	 
	 <!-- 재 회원가입 -->
     <update id="reRegisterMembers">
			update dk_member set nickName= #{nickName},
								 regDate = sysdate,
								 preLoginDate = sysdate,
								 lastLoginDate = sysdate,
								 enabled = 1
						   where userid = #{userId}
	 </update>
	 
	 <!-- 이메일 중복 체크 카운트 구하기 -->
	 <select id="emailCheckedCount" resultType="int">
	 	select count(*) from dk_member where email= #{inputEmail}
	 </select>
	 
</mapper>
