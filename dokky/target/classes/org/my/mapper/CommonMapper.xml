<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.my.mapper.CommonMapper">
<!-- 마지막 업데이트 2022-06-14 -->

	<select id="getRealtimeBoardList" resultType="org.my.domain.board.BoardVO"> 
		 SELECT /*+INDEX_DESC(DK_BOARD PK_DK_BOARD) */ money,
		 											   replyCnt,
		 										 	   board_num,
		 										  	   title,
		 										   	   nickName,
		 										       regdate,
		 										       hitCnt,
		 										       userId,
		 										       likeCnt
		  from dk_board where <![CDATA[ rownum <= 5  ]]>
	</select>
	 
	<select id="getMonthlyBoardList" resultType="org.my.domain.board.BoardVO"> 
		select 	 
				money,
		 		replyCnt,
			 	board_num, 
			 	title, 
			 	nickName, 
			 	regdate, 
			 	hitCnt,
			 	userId,
			 	likeCnt
			 from (
		SELECT 
			money,
			replyCnt,
		 	board_num, 
		 	title, 
		 	nickName, 
		 	regdate, 
		 	hitCnt,
		 	userId,
		 	likeCnt
		  from dk_board WHERE REGDATE >= SYSDATE-30 order by likeCnt desc,hitcnt desc,replycnt desc )
		  where <![CDATA[ rownum <= 5 ]]>
	</select>
	
	<select id="getDonationBoardList" resultType="org.my.domain.board.BoardVO"> 
		<![CDATA[
		 	select 	 
		 		 money,
	 			 replyCnt, 
	 			 board_num, 
	 			 title, 
	 			 nickName, 
	 			 regdate, 
	 			 hitCnt,
	 			 userId,
	 			 likeCnt
			 from 
			   ( 
			   SELECT
			   	 money , 
			   	 replyCnt, 
			   	 board_num, 
			   	 title, 
			   	 nickName, 
			   	 regdate, 
			   	 hitCnt,
			   	 userId,
			   	 likeCnt
			FROM 
				  dk_board WHERE REGDATE >= SYSDATE-30 order by money desc )
			
			where rownum <= 5 
			]]>
	</select>
	
	<select id="getNickname" resultType="String">
		select nickName from DK_MEMBER where userId = #{userId}
	</select>
	
	<select id="getNicknameCheckedVal" resultType="int">
			select count(*) from DK_MEMBER where nickName = #{nickName}
	</select>
	
	  <!-- 아이디 중복 체크 카운트 구하기 -->
	  <select id="getIdCheckedVal" resultType="int">
	 	 select count(*) from dk_member where userId= #{profileId}
	  </select>
	  
	  <!-- 가장 마지막 이전의 로그인 날짜 업데이트 -->
	  <update id="updatePreLoginDate">
	 	 update dk_member set preLoginDate = lastLoginDate where userId = #{userId} 
	  </update>
	 
	  <!-- 가장 마지막 로그인날짜 -->
	  <update id="updatelastLoginDate">
	 	 update dk_member set lastLoginDate = sysdate where userId = #{userId} 
	  </update>
	 
	  <insert id="insertVisitor">
          insert into dk_visitor
            (
                visitor_num,
                ip,
	               <if test="refer != null and refer !=''">
	              	  refer,
	                </if>
                agent
            )
            VALUES
            (
                seq_dk_visitor.NEXTVAL,
                #{ip},
	                <if test="refer != null and refer !=''">
	               		 #{refer},
	                </if>
                #{agent}
            )
       </insert>
       
       <select id="getVisitTotalCount" resultType="int">
			select count(*) from dk_visitor     
       </select>
       
        <select id="getVisitTodayCount" resultType="int">
			<!-- select count(*) from dk_visitor where substr(to_char(visit_time), 1, 9) = to_date(sysdate, 'yy/MM/dd') -->
			select count(*) from dk_visitor where substr(to_char(visit_time,'yy/MM/dd'), 1, 9) = to_char(sysdate, 'yy/MM/dd')
       </select>
       
        <select id="getAllAlarmCount" resultType="int">
			select count(*) from dk_alarm where target = #{userId}
       </select>
	  
	  <select id="getAlarmCountNotRead" resultType="int">
			select count(*) from dk_alarm where target = #{userId} and checking = 'NO'
       </select>
       
       <select id="getAlarmCountRead" resultType="int">
       		select count(*) from dk_alarm where target = #{userId} and checking = 'YES' 
       </select>
       
       <select id="getNoteCount" resultType="String">
			select count(*) from dk_note where TO_ID = #{userId} and FROM_ID != #{userId} and from_check = 'NO' and read_check = 'NO'
       </select>
       
       <select id="getChatCount" resultType="String">
			select count(*) from dk_chat_read where chat_memberId = #{userId} and read_type = 0
       </select>
	  
       <select id="getAllAlarmList" resultType="org.my.domain.common.AlarmVO"> 
			select alarmNum,
				   checking,
				   target,
				   writerNick,
				   writerId,
				   kind,
				   commonVar1,
				   commonVar2,
				   commonVar3,
				   regdate from 
					 ( select /*+INDEX_DESC(dk_alarm pk_dk_alarm) */ rownum rn,
					 														alarmNum,
					 														checking,
					 														target,
					 														writerNick,
					 														writerId,
					 														kind,
					 														commonVar1,
																			commonVar2,
																			commonVar3,
					 														regdate
					from dk_alarm where target = #{userId} and <![CDATA[ rownum <= #{pageNum} * #{amount} )
						  where rn > (#{pageNum} -1) * #{amount}  
						  ]]>
	   </select>
	   
	    <select id="getAlarmListRead" resultType="org.my.domain.common.AlarmVO"> 
			select alarmNum,
				   checking,
				   target,
				   writerNick,
				   writerId,
				   kind,
				   commonVar1,
				   commonVar2,
				   regdate from 
					 ( select /*+INDEX_DESC(dk_alarm pk_dk_alarm) */ rownum rn,
					 														alarmNum,
					 														checking,
					 														target,
					 														writerNick,
					 														writerId,
					 														kind,
					 														commonVar1,
																			commonVar2,
					 														regdate
					from dk_alarm where target = #{userId} and checking = 'YES' and <![CDATA[ rownum <= #{pageNum} * #{amount} )
						  where rn > (#{pageNum} -1) * #{amount}  
						  ]]>
	   </select>
	   
	    <select id="getAlarmListNotRead" resultType="org.my.domain.common.AlarmVO"> 
			select alarmNum,
				   checking,
				   target,
				   writerNick,
				   writerId,
				   kind,
				   commonVar1,
				   commonVar2,
				   regdate from 
					 ( select /*+INDEX_DESC(dk_alarm pk_dk_alarm) */ rownum rn,
					 														alarmNum,
					 														checking,
					 														target,
					 														writerNick,
					 														writerId,
					 														kind,
					 														commonVar1,
																			commonVar2,
					 														regdate
					from dk_alarm where target = #{userId} and checking = 'NO' and <![CDATA[ rownum <= #{pageNum} * #{amount} )
						  where rn > (#{pageNum} -1) * #{amount}  
						  ]]>
	   </select>
	   
	   <insert id="insertAlarm">
          insert into dk_alarm(
				               alarmNum,
				               target,
				               writerNick,
				  			   writerId,
				  			   <if test="commonVar1 != null and commonVar1 !=''">
				              	    commonVar1,
				                </if>
				                <if test="commonVar2 != null and commonVar2 !=''">
				              	    commonVar2,
				                </if>
				                <if test="commonVar3 != null and commonVar3 !=''">
				              	    commonVar3,
				                </if>
				               kind
					          )
					            VALUES
						            (
						                seq_dk_alarm.nextval,
						                #{target},
						                #{writerNick},
						                #{writerId},
						                 <if test="commonVar1 != null and commonVar1 !=''">
						               		 #{commonVar1},
						                </if>
						                <if test="commonVar2 != null and commonVar2 !=''">
						               		  #{commonVar2},
						                </if>
						                <if test="commonVar3 != null and commonVar3 !=''">
						               		  #{commonVar3},
						                </if>
						                #{kind}
						            )
       </insert>
       
       <delete id="deleteAlarm">
       		delete from dk_alarm where target = #{target} 
       							and commonVar1 = #{commonVar1} 
       							and commonVar2 = #{commonVar2} 
       							and kind = #{kind}
       							and writerNick = #{writerNick}
       							and writerId = #{writerId}
       </delete>
       
       <delete id="deleteMyNote">
       		delete from dk_note where note_num = #{note_num} 
       </delete>
       
       <update id="updateFromNote">
       		update dk_note set from_check = 'YES' where note_num = #{note_num}
       </update>
       
       <update id="updateToNote">
       		update dk_note set to_check = 'YES' where note_num = #{note_num}
       </update>
       
       <delete id="deleteAllAlarm">
       		delete from dk_alarm where alarmNum = #{alarmNum} 
       </delete>
       
       	<!-- 알림 읽기, 알림 체크 값 바꿔주기 -->
       <update id="updateAlarmCheck"> 
       		update dk_alarm set checking = 'YES' where alarmNum = #{alarmNum}
       </update>
       
       <select id="getDetailNotepage" resultType="org.my.domain.common.NoteVO">
       		   select NOTE_NUM
		       		, CONTENT
		       		, FROM_NICKNAME
		       		, FROM_ID
		       		, TO_NICKNAME
					, TO_ID
		       		, REGDATE from dk_note where NOTE_NUM = #{note_num}
       </select>
						  
       <update id="updateNoteCheck">
			update dk_note set read_check = 'YES' where note_num = #{note_num}       
       </update>
	  
       <select id="getToNoteList" resultType="org.my.domain.common.NoteVO">
       
       		  select NOTE_NUM
				   , CONTENT
				   , TO_NICKNAME
				   , TO_ID
				   , read_check
				   , regdate 
				   
				   from (select /*+INDEX_DESC(DK_NOTE PK_DK_NOTE) */  rownum rn
			       												 	, NOTE_NUM
															   	    , CONTENT
																    , TO_NICKNAME
																    , TO_ID
																    , read_check
																    , regdate 
																    
				   from dk_note where from_id = #{userId} and to_id != #{userId} and to_check = 'NO' <![CDATA[ and rownum <= #{pageNum} * #{amount} )
					 where rn > (#{pageNum} -1) * #{amount}  
						  ]]>
       </select>
       
       <select id="getFromNoteList" resultType="org.my.domain.common.NoteVO"> 
			select NOTE_NUM,
				   CONTENT,
				   FROM_NICKNAME,
				   FROM_ID,
				   read_check,
				   regdate from 
					 ( select /*+INDEX_DESC(DK_NOTE PK_DK_NOTE) */ rownum rn,
		 														   NOTE_NUM,
															   	   CONTENT,
																   FROM_NICKNAME,
																   FROM_ID,
																   read_check,
																   regdate
					from DK_NOTE where TO_ID = #{userId} and FROM_ID != #{userId} and from_check = 'NO'<![CDATA[ and rownum <= #{pageNum} * #{amount} )
						  where rn > (#{pageNum} -1) * #{amount}  
						  ]]>
	   </select>
	   
	   <select id="getMyNoteList" resultType="org.my.domain.common.NoteVO">
		    select NOTE_NUM,
				   CONTENT,
				   FROM_NICKNAME,
				   FROM_ID,
				   regdate from 
					 ( select /*+INDEX_DESC(DK_NOTE PK_DK_NOTE) */ rownum rn,
		 														   NOTE_NUM,
															   	   CONTENT,
																   FROM_NICKNAME,
																   FROM_ID,
																   regdate
					from DK_NOTE where TO_ID = #{userId} and FROM_ID = #{userId} <![CDATA[ and rownum <= #{pageNum} * #{amount} )
						  where rn > (#{pageNum} -1) * #{amount}  
						  ]]>
	   </select>
	   
	   <select id="getEnabled" resultType="int">
			select enabled from dk_member where userId = #{userId}
       </select>
       
		<select id="getFromNoteCount" resultType="int">
			select count(*) from dk_note where TO_ID = #{userId} and FROM_ID != #{userId} and from_check = 'NO'
       </select>
       
       <select id="getToNoteCount" resultType="int">
			select count(*) from dk_note where FROM_ID = #{userId} and TO_ID != #{userId} and to_check = 'NO'
       </select>
       
       <select id="getMyNoteCount" resultType="int">
			select count(*) from dk_note where TO_ID = #{userId} and FROM_ID = #{userId}
       </select>
       
       <insert id="insertNote">
	 			insert into dk_note(	  NOTE_NUM
							 			, CONTENT
							 			, FROM_NICKNAME
							 			, FROM_ID
							 			, TO_NICKNAME
							 			, TO_ID 
							 			, read_check
					 			   ) 
					 		values(
						 				seq_dk_note.nextval
						 				,#{content}
										,#{from_nickname}
										,#{from_id}
										,#{to_nickname}				 		
								 		,#{to_id}
								 		,#{read_check}
					 				) 
       </insert>
       
       <delete id="deleteRememberMeToken">
			delete from persistent_logins where username = #{userId}
		</delete>
		   
</mapper>
