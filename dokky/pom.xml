<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.my</groupId>
	<artifactId>dokky</artifactId>
	<name>dokky</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.0.7.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version> <!-- 스프링의 AOP는 AspectJ 라는 라이브러리의 도움을 많이 받는다.-->
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	
	<dependencies>
	
		<!-- 웹소켓 -->
		<dependency>
			<groupId>javax.websocket</groupId>	      
			<artifactId>javax.websocket-api</artifactId>
			<version>1.1</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>5.0.7.RELEASE</version> 
		</dependency>
		<!-- 웹소켓 -->
			
		<!-- oauth2 login -->
		<dependency>
		      <groupId>com.github.scribejava</groupId>
		      <artifactId>scribejava-apis</artifactId>
		      <version>5.6.0</version>
		</dependency>
		    
		<dependency>
		      <groupId>com.github.scribejava</groupId>
		      <artifactId>scribejava-core</artifactId>
		      <version>5.6.0</version>
		</dependency>
		<!-- oauth2 login -->
			
		<!-- 시큐리티  -->
		<!--스프링 공식 문서에는 spring-security-web만이 존재하지만 다양한 처리를 위해서는 아래와 같이 3개의 파일을 받고, 3개의 파일은 동일한 버전으로 맞춰야 한다. -->
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-web</artifactId>
		    <version>5.0.13.RELEASE</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-config</artifactId>
		    <version>5.0.13.RELEASE</version>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-core</artifactId>
		    <version>5.0.13.RELEASE</version>
		</dependency>
				
		<!-- JSP에서는 스프링 시큐리티 관련된 태그 라이브러리를 활용할 수 있도록 springsecurity-taglib 을 추가 -->
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-taglibs</artifactId>
		    <version>5.0.13.RELEASE</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-test -->
		<dependency>
		    <groupId>org.springframework.security</groupId>
		    <artifactId>spring-security-test</artifactId>
		    <version>5.0.13.RELEASE</version>
		    <scope>test</scope>
		</dependency>
		<!-- 시큐리티  -->
		
		<!-- 스케쥴링 -->
		<!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz -->
		<dependency>
		    <groupId>org.quartz-scheduler</groupId>
		    <artifactId>quartz</artifactId>
		    <version>2.3.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz-jobs -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz-jobs</artifactId>
			<version>2.3.0</version>
		</dependency>
		<!-- 스케쥴링 -->
			
		<!-- 섬네일 이미지 작업처리  -->
		<!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator -->
		<dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>0.4.8</version>
		</dependency>
		
		<!-- 브라우저에 객체를 JSON이라는 포맷의 문자열로 변환시켜 전송할 때 필요-->
		<!-- Controller의 메서드 리턴 타입을 VO나 DTO타입 등 복합적인 데이터가 들어간 객체 타입으로 지정하기위해 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.10.3</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml -->
		<!-- 데이터를 XML 포맷 처리 jackson-dataformat-xml 라이브러리를 이용-->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.9.6</version>
		</dependency>
	
		<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<!-- 테스트할 때는 직접 Java 인스턴스를 JSON 타입의 문자열로 변환해야 할때 필요 -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>
				
		<!-- Spring 스프링 프레임워크의 기본적인 DI 기능을 사용할 때에는 다음과 같은(spring-context)의존 설정 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
	
		<!-- spring-webmvc : 웹개발과 관련된 기능제공 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
					
		<!-- AspectJ -->
		<!-- AOP 설정과 관련해서 가장 중요한 라이브러리,-->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		<!-- 스프링은 AOP 처리가 된 객체를 생성할 때 AspectJ Weaver 라이브러리의 도움을 받아서 동작  -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>
			
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		
		<!-- @Inject -->
		<!-- Inject 애노테이션을 사용하려면，먼저 @Inject 애노테이션을 포함한 jar 파일을 개발환경에 추가-->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
		
		<!-- Servlet -->
		<!-- 3.0이상 버젼은 자바설정이용에 더좋고, 자체적인 파일 업로드 처리가 API 상에서 지원하니 이것으로 사용한다. -->
		<dependency>
		  <groupId>javax.servlet</groupId>
		  <artifactId>javax.servlet-api</artifactId>
		  <version>3.1.0</version>
		  <scope>provided</scope>
		</dependency>
	
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency> 
			
		<!-- https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-websocket -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-websocket</artifactId>
			<version>9.0.16</version>
		</dependency>
				
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
	    
	    <dependency><!-- 필요 -->
		  <groupId>com.oracle</groupId>
		  <artifactId>ojdbc7</artifactId>
		  <version>12.1.0.2.0</version>
		</dependency>
		
		<!-- 커넥션풀 설정 https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency><!-- 필요 -->
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>2.7.8</version>
		</dependency>
	
		<!-- mybatis관련 -->
		<!--아래 2가지 spring-jdbc,spring-tx 스프링에서 데이터베이스 처리와 트랜잭션 처리 라이브러리들은 MyBatis와 무관하게 보이지만 추가하지 않은 경우에 에러가 발생 -->
		<dependency><!-- 필요 -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency><!-- 필요 -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
	  
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<!-- 이것은 mybatis -->
		<dependency><!-- 필요 -->
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		
		<!-- 이것은 mybatis 와 spring연동 -->
		<dependency><!-- 필요 -->
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>
		
		<!-- 이것은 SQL을 변환해서 PreparedStatement에 사용된 '?’가 어떤 값으로 처리되었는지 확인하는 기능 -->
		<dependency><!-- db관련 로그를 정확히 찍어보기 위해 필요 이곳 버전을 바꾸지 말도록 주의 오래된 것이라 호환 잘 안됨-->
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
			<version>1.16</version>
		</dependency>
		<!-- mybatis관련 -->
		
		<!-- 롬복 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.0</version>
			<scope>provided</scope>
		</dependency>
		<!-- 롬복 -->
		
		<dependency>   
			<groupId>org.jsoup</groupId>  
		 	<artifactId>jsoup</artifactId>
		 	<version>1.11.3</version> 
		</dependency>
	
		<!-- aws s3 관련 sdk -->
		<dependency>
		    <groupId>com.amazonaws</groupId>
		    <artifactId>aws-java-sdk</artifactId>
		    <version>1.11.66</version>
		</dependency>
	
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
			     <artifactId>maven-eclipse-plugin</artifactId>
			     <version>2.9</version>
			     <configuration>
			         <additionalProjectnatures>
			             <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
			         </additionalProjectnatures>
			         <additionalBuildcommands>
			             <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
			         </additionalBuildcommands>
			         <downloadSources>true</downloadSources>
			         <downloadJavadocs>true</downloadJavadocs>
			     </configuration>
			</plugin>
			<!--  Maven의 컴파일 옵션은 1.8버전, 프로젝트의 Maven 메뉴에서 update project 실행 관련 -->
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <version>2.5.1</version>
			    <configuration>
			        <source>1.8</source>
			        <target>1.8</target>
			        <compilerArgument>-Xlint:all</compilerArgument>
			        <showWarnings>true</showWarnings>
			        <showDeprecation>true</showDeprecation>
			    </configuration>
			</plugin>
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>exec-maven-plugin</artifactId>
			    <version>1.2.1</version>
			    <configuration>
			        <mainClass>org.test.int1.Main</mainClass>
			    </configuration>
			</plugin>
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-war-plugin</artifactId>
			    <version>2.4</version>
			    <configuration>
			        <warsourcedirectory>src/main/webapp</warsourcedirectory>
			        <webxml>src/main/webapp/WEB-INF/web.xml</webxml>
			    </configuration>
			</plugin>
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>tomcat-maven-plugin</artifactId>
			    <version>1.1</version>
			    <configuration>
					<url></url>
			        <path>/</path>
			        <username></username>
			        <password></password>
			    </configuration>	
			</plugin>
		</plugins>
	</build>
</project>